package main

import (
	"fmt"
	_ "time"
)

func fib(c, quit chan int) {
	x, y := 0, 1

	for {
		// если не обернуть в бесконечный цикл, то select выполнится только один раз!!!
		select {
		case c <- x: // пишем данные в канал... т.е. посылаем значение переменной х в канал
			x, y = y, x + y // здесь сначало вычисляется все выражения справа, а потом только идет присвоение их результатов
		case <-quit:
			return // из канала quit что-то пришло, попадаем в эту итерацию
		}
	}

}

func main() {
	c := make(chan int)
	quit := make(chan int)

	// создаем анонимную функцию, которая будет ожидать данные из канала, в цикле, как все данные придут, цикл завершится посылом данных в другой канал
	go func() {
		for i := 1; i <= 15; i++ {
			fmt.Println(<-c) // ждем данные из канал "с" здесь висим, горутинка будет заблочена, пока данные не придут!
		}
		quit <- 100 // здесь в канал quit посылаем любое значение типа int, для того, чтобы в функции fib сработал select и беск цикл завершился
	}()

	fib(c, quit)
}
