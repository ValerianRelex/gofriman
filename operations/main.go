package main

import (
	"fmt"
	"math"
	"strconv"
)

func main() {
	var intMaxVal = math.MaxInt64
	var floatMaxVal = math.MaxFloat64

	fmt.Println(intMaxVal)
	fmt.Println(intMaxVal * 2)
	fmt.Println(floatMaxVal)
	fmt.Println(floatMaxVal * 2)

	fmt.Println("\n\n", math.IsInf((floatMaxVal*2), 0), "\n\n")

	posResult := 3 % 2
	negResult := -3 % 2
	absResult := math.Abs(float64(negResult))
	fmt.Println(posResult)
	fmt.Println(negResult)
	fmt.Println(absResult)

	first := 100
	second := &first
	third := &first
	alpha := 100
	beta := &alpha
	fmt.Println("second == third", second == third) // true
	fmt.Println("second == beta", second == beta) // —Ä–∞–∑–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏  false

	fmt.Println("first == *beta ---> ", first == *beta) // 100 == 100  true

	kayak := 275        // –ª–∏—Ç–µ—Ä–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–≤–æ–¥—è—Ç –∫ —Ç–∏–ø—É int
	soccerBall := 19.50 // –∏ –∫ —Ç–∏–ø—É float64

	// –µ—Å–ª–∏ –Ω–µ —Å–¥–µ–ª–∞—Ç—å —è–≤–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤, —Ç–æ –ø–æ–ª—É—á–∏–º –æ—à–∏–±–∫—É –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
	total := float64(kayak) + soccerBall // # operations .\main.go:41:11: invalid operation: kayak + soccerBall (mismatched types int and float64)
	// total := kayak + int(soccerBall)
	fmt.Println(total)
	fmt.Println(int8(total)) // –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–≤–æ–¥

	fmt.Println("math.Ceil(21.1)", math.Ceil(21.1))   // –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —á–∏—Å–µ–ª
	fmt.Println("math.Floor(21.1)", math.Floor(21.1)) // –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —á–∏—Å–µ–ª

	val1 := "true"
	val2 := "false"
	val3 := "not true"
	bool1, b1err := strconv.ParseBool(val1)
	bool2, b2err := strconv.ParseBool(val2)
	bool3, b3err := strconv.ParseBool(val3)
	fmt.Println("Bool 1", bool1, b1err)
	fmt.Println("Bool 2", bool2, b2err)
	fmt.Println("Bool 3", bool3, b3err)

	val := "0"
	valBool1, berr := strconv.ParseBool(val)
	if berr == nil {
		fmt.Println("Parsed value:", valBool1)
	} else {
		fmt.Println("Cannot parse", val)
	}

	// –∑–∞–ø–∏—Å—å –Ω–∏–∂–µ –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–∞—è, –∞–Ω–∞–ª–æ–≥ –∑–∞–ø–∏—Å–∏ –≤—ã—à–µ
	val = "1"
	if bool1, b1err := strconv.ParseBool(val); b1err == nil {
		fmt.Println("Parsed value:", bool1)
	} else {
		fmt.Println("Cannot parse", val)
	}

	str1 := "100"

	fmt.Println("int1 = ", str1)

	if int1, strErr := strconv.ParseInt(str1, 0, 8); strErr != nil {
		fmt.Println("int1 –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤ —Å—Ç—Ä–æ–∫—É -> ", int1)
	} else {
		fmt.Println("int1 —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ = ", int1+5) // —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –Ω–µ —Å—Ç—Ä–æ–∫–∞. –∞ int –∏ –ø–æ—ç—Ç–æ–º—É –º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –º–∞—Ç. –æ–ø–µ—Ä–∞—Ü–∏–∏
	}

	val11 := "100"
	int11, int1err := strconv.ParseInt(val11, 0, 8)
	if int1err == nil {
		fmt.Println("Parsed value:", int11)
	} else {
		fmt.Println("Cannot parse", val11, int1err)
	}

	val100 := "100"
	int100, int100err := strconv.ParseInt(val100, 10, 0)
	if int100err == nil {
		var intResult int = int(int100)
		fmt.Println("Parsed value:", intResult+100)
	} else {
		fmt.Println("Cannot parse", val100, int100err)
	}

	// —Å–ø–æ—Å–æ–±—ã –∑–∞–¥–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
	// var valBool bool = true
	// var valBool = true
	// var valBool bool // –Ω–æ –æ–Ω–æ –±—É–¥–µ—Ç false
	valBool := true

	strBool := strconv.FormatBool(valBool)
	fmt.Println("valBool =", strBool)
	fmt.Println("valBool = " + strBool)

	stringa := "redoctober"

	for index, character := range stringa {
		// –≤—ã–≤–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π rune
		fmt.Println("Index:", index, "char:", string(character)) // –µ—Å–ª–∏ —É–±—Ä–∞—Ç—å –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞, –≤—ã–≤–µ–¥–µ—Ç—Å—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤!
	}

	stringAsRuna := "I love GO!"

	for index, char := range stringAsRuna {
		switch char {
		case 'l': fmt.Println("Index of char 'l'", index)
		case 'o': fmt.Println("Index of char 'o'", index)
		}
	}

	emoji := "–ø—Ä–∏–≤–µ—ÇüòÄ \U0001F600"

	for _, e := range emoji {
		fmt.Println(e, string(e))
	}
}
